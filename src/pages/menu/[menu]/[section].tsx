import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { PageLayout } from "~/components/Layout";
import { api } from "~/utils/api";
import { LoadingSpinner } from "~/components/Primary/LoadingSpinner";
import { useRouter } from "next/router";
import { SmtWrong } from "~/components/Primary";
import MenuSection from "~/components/Menu/MenuSection";
import SectionsHeader from "~/components/Menu/SectionsHeader";
import MenuNavbar from "~/components/Menu/Navbar";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

const MenuSectionPage: NextPage<{ menuSlug: string }> = ({ menuSlug }) => {
  const router = useRouter();
  const sectionSlug = router.query?.section as string;
  const { data: menu, isLoading } = api.menus.getBySlug.useQuery({
    slug: menuSlug,
  });

  const section = menu?.sections?.find((item) => item.slug === sectionSlug);

  if (isLoading) return <LoadingSpinner />;
  if (!section || !menu) return <SmtWrong />;

  return (
    <>
      <Head>
        <title>
          Restidy - {section?.nameEn ?? "Section"} ({menu?.nameEn ?? "Menu"})
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <MenuNavbar />
        <SectionsHeader menu={menu} />
        <MenuSection section={section} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();

  const menuSlug = context.params?.menu as string;
  const sectionSlug = context.params?.section as string;

  if (typeof menuSlug !== "string") throw new Error("no menu");
  if (typeof sectionSlug !== "string") throw new Error("no section");

  await ssg.menus.getBySlug.prefetch({ slug: menuSlug });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      menuSlug,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default MenuSectionPage;
